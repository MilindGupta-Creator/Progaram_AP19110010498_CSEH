1. C program to print preorder, inorder, and postorder traversal on Binary Tree.  
#include <stdio.h> 
#include <stdlib.h> 
struct node 
{ 
     int data; 
     struct node* left; 
     struct node* right; 
}; 
struct node* newNode(int data) 
{ 
     struct node* node = (struct node*)malloc(sizeof(struct node));  
     node->data = data; 
     node->left = NULL; 
     node->right = NULL; 
     return(node); 
} 
void printPostorder(struct node* node) 
{ 
 // Do a postorder Traversal
     if (node == NULL) 
     return; 
     printPostorder(node->left); 
     printPostorder(node->right); 
     printf("%d ", node->data); 
} 
void printInorder(struct node* node) 
{ 
// Do an Inorder Traversal
     if (node == NULL) 
     return; 
     printInorder(node->left); 
     printf("%d ", node->data);   
     printInorder(node->right); 
} 
void printPreorder(struct node* node) 
{ 
 // Do a Preorder Traversal
     if (node == NULL) 
     return; 
     printf("%d ", node->data);   
     printPreorder(node->left);   
     printPreorder(node->right); 
}     
int main() 
{ 
 // Program to demonstrate finding the height of a Binary Tree
     struct node *root = newNode(1); 
// Insert nodes onto the tree
     root->left = newNode(2); 
     root->right = newNode(3); 
     root->left->left = newNode(4); 
     root->left->right = newNode(5);  
     printf("\nPreorder traversal of binary tree is \n"); 
     printPreorder(root); 
     printf("\nInorder traversal of binary tree is \n"); 
     printInorder(root);   
     printf("\nPostorder traversal of binary tree is \n"); 
     printPostorder(root); 
     return 0; 
}

2. C program to create (or insert) and inorder traversal on Binary Search Tree.

#include<stdio.h> 
#include<stdlib.h> 
/* A binary tree node has data, pointer to left child 
   and a pointer to right child */
struct node 
{ 
    int key; 
    struct node *left, *right; 
}; 
/* A utility function to allocate memory for a node */
struct node *newNode(int item) 
{ 
    struct node *temp =  (struct node *)malloc(sizeof(struct node)); 
    temp->key = item; 
    temp->left = temp->right = NULL; 
    return temp; 
} 
void inorder(struct node *root) 
{ 
    if (root != NULL) 
    { 
    inorder(root->left); 
    printf("%d \n", root->key); 
    inorder(root->right); 
    } 
} 
struct node* insert(struct node* node, int key) 
{ 
    if (node == NULL) return newNode(key); 
    if (key < node->key) 
    node->left  = insert(node->left, key); 
    else if (key > node->key) 
    node->right = insert(node->right, key);    
    return node; 
} 

int main() 
{
 /* Assume that inorder traversal of following tree is given 
         40 
       /   \ 
      10     30 
     /         \ 
    5          28 */
    struct node *root = NULL; 
    root = insert(root, 25); 
    insert(root, 48); 
    insert(root, 14); 
    insert(root, 65); 
    insert(root, 28); 
    insert(root, 36); 
    insert(root, 42); 
 /* Let us test the built tree by printing Insorder traversal */
   
    inorder(root); 
    return 0; 
} 

3. Write a C program for linear search algorithm
#include <stdio.h>
 
void main()
{  int num;
 
    int i,  keynum, found = 0;
 
    printf("Enter the number of elements ");
    scanf("%d", &num);
    int array[num];
    printf("Enter the elements one by one \n");
    for (i = 0; i < num; i++)
    {
        scanf("%d", &array[i]);
    }
 
    printf("Enter the element to be searched ");
    scanf("%d", &keynum);
    /*  Linear search begins */
    for (i = 0; i < num ; i++)
    {
        if (keynum == array[i] )
        {
            found = 1;
            break;
        }
    }
    if (found == 1)
        printf("Element is present in the array at position %d",i+1);
    else
        printf("Element is not present in the array\n");
}

4. C program for binary search algorithm

#include <stdio.h>
int main()
{
  int c, first, last, middle, n, search, array[100];

  printf("Enter number of elements\n");
  scanf("%d", &n);

  printf("Enter %d integers\n", n);

  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);

  printf("Enter value to find\n");
  scanf("%d", &search);

  first = 0;
  last = n - 1;
  middle = (first+last)/2;

  while (first <= last) 
{
    if (array[middle] < search)
      first = middle + 1;
    else if (array[middle] == search) {
      printf("%d found at location %d.\n", search, middle+1);
      break;
    }
    else
      last = middle - 1;

    middle = (first + last)/2;
  }
  if (first > last)
    printf("Not found! %d isn't present in the list.\n", search);

  return 0;
}
